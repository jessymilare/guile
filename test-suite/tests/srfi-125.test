;;;; srfi-125.test --- Test suite for SRFI 125 -*- scheme -*-
;;;;
;;;; 	Copyright (C) 2019 Free Software Foundation, Inc.
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;;
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

;;; The following tests are the tests from SRFI-125 reference
;;; implementation ported to Guile test suite.

;;; Copyright (C) William D Clinger 2015. All Rights Reserved.
;;;
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without restriction,
;;; including without limitation the rights to use, copy, modify, merge,
;;; publish, distribute, sublicense, and/or sell copies of the Software,
;;; and to permit persons to whom the Software is furnished to do so,
;;; subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;;; CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;;; TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;;; SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

;;; Comentary from standard SRFI 125 tests:
;;;
;;; This is a very shallow sanity test for hash tables.
;;;
;;; Tests marked by a "FIXME: glass-box" comment test behavior of the
;;; reference implementation that is not required by the specification.

(define-module (test-srfi-125)
  #:duplicates (last)
  #:use-module (test-suite lib)
  #:use-module (srfi srfi-128)
  #:use-module (srfi srfi-125)
  #:use-module (srfi srfi-1)
  #:use-module (rnrs bytevectors)
  #:use-module ((rnrs base) #:select (symbol=?))
  #:use-module ((rnrs) #:select (list-sort guard)))

(define (bytevector . args)
  (u8-list->bytevector args))

(define default-comparator (make-default-comparator))

(define number-comparator
  (make-comparator real? = < (lambda (x) (inexact->exact (abs (round x))))))

(define string-comparator
  (make-comparator string? string=? string<? string-hash))

(define string-ci-comparator
  (make-comparator string? string-ci=? string-ci<? string-ci-hash))

(define eq-comparator (make-eq-comparator))

(define eqv-comparator (make-eqv-comparator))

;;; Returns an immutable hash table.

(define (hash-table-tabulate comparator n proc)
  (let ((ht (make-hash-table comparator)))
    (do ((i 0 (+ i 1)))
        ((= i n)
         (hash-table-copy ht))
      (call-with-values
          (lambda ()
            (proc i))
        (lambda (key val)
          (hash-table-set! ht key val))))))

;;; Constructors.

(define ht-default (make-hash-table default-comparator))

(define ht-eq (make-hash-table eq-comparator 'random-argument "another"))

(define ht-eqv (make-hash-table eqv-comparator))

(define ht-eq2 (make-hash-table eq?))

(define ht-eqv2 (make-hash-table eqv?))

(define ht-equal (make-hash-table equal?))

(define ht-string (make-hash-table string=?))

(define ht-string-ci (make-hash-table string-ci=?))

(define ht-symbol (make-hash-table symbol=?))    ; FIXME: glass-box

(define ht-fixnum (make-hash-table = abs))

;; Spec says HASH-TABLE returns an immutable hash table, so we put a
;; HASH-TABLE-COPY here
(define ht-default2
  (hash-table-copy
   (hash-table default-comparator 'foo 'bar 101.3 "fever" '(x y z) '#())
   #t))

(define ht-fixnum2
  (hash-table-tabulate number-comparator
                       10
                       (lambda (i) (values (* i i) i))))

(define ht-string2
  (hash-table-unfold (lambda (s) (= 0 (string-length s)))
                     (lambda (s) (values s (string-length s)))
                     (lambda (s) (substring s 0 (- (string-length s) 1)))
                     "prefixes"
                     string-comparator
                     'ignored1 'ignored2 "ignored3" '#(ignored 4 5)))

(define ht-string-ci2
  (alist->hash-table '(("" . 0) ("Mary" . 4) ("Paul" . 4) ("Peter" . 5))
                     string-ci-comparator
                     "ignored1" 'ignored2))

(define ht-symbol2
  (alist->hash-table '((mary . travers) (noel . stookey) (peter . yarrow))
                     eq?))

(define ht-equal2
  (alist->hash-table '(((edward) . abbey)
                       ((dashiell) . hammett)
                       ((edward) . teach)
                       ((mark) . twain))
                     equal?
                     (comparator-hash-function default-comparator)))

(define test-tables
  (list ht-default   ht-default2   ; initial keys: foo, 101.3, (x y z)
        ht-eq        ht-eq2        ; initially empty
        ht-eqv       ht-eqv2       ; initially empty
        ht-equal     ht-equal2     ; initial keys: (edward), (dashiell), (mark)
        ht-string    ht-string2    ; initial keys: "p, "pr", ..., "prefixes"
        ht-string-ci ht-string-ci2 ; initial keys: "", "Mary", "Paul", "Peter"
        ht-symbol    ht-symbol2    ; initial keys: mary, noel, peter
        ht-fixnum    ht-fixnum2))  ; initial keys: 0, 1, 4, 9, ..., 81


(with-test-prefix "SRFI-125"

  (with-test-prefix "predicates"

    (pass-if-equal "hash-table? functions properly"
        (append '(#f #f) (map (lambda (x) #t) test-tables))
      (map hash-table?
           (cons '#()
                 (cons default-comparator
                       test-tables))))

    (pass-if-equal "hash-table-contains? functions properly"
        '(#f #t #f #f #f #f #f #t #f #t #f #t #f #t #f #t)
      (map hash-table-contains?
           test-tables
           '(foo 101.3
                 x "y"
                 (14 15) #\newline
                 (edward) (mark)
                 "p" "pref"
                 "mike" "PAUL"
                 jane noel
                 0 4)))

    (pass-if-equal "hash-table-contains? functions properly"
        (map (lambda (x) #f) test-tables)
      (map hash-table-contains?
           test-tables
           `(,(bytevector) 47.9
             '#() '()
             foo bar
             19 (henry)
             "p" "perp"
             "mike" "Noel"
             jane paul
             0 5)))

    (pass-if-equal "hash-table-empty? functions properly"
        '(#t #f #t #t #t #t #t #f #t #f #t #f #t #f #t #f)
      (map hash-table-empty? test-tables))

    (pass-if-equal "hash-table=? is reflective"
        (map (lambda (x) #t) test-tables)
      (map (lambda (ht1 ht2) (hash-table=? default-comparator ht1 ht2))
           test-tables
           test-tables))

    (pass-if-equal "hash-table=? functions properly"
        '(#f #f #t #t #t #t #f #f #f #f #f #f #f #f #f #f)
      (map (lambda (ht1 ht2) (hash-table=? default-comparator ht1 ht2))
           test-tables
           (do ((tables (reverse test-tables) (cddr tables))
                (rev '() (cons (car tables) (cons (cadr tables) rev))))
               ((null? tables)
                rev))))

    (pass-if-equal "hash-table-mutable? functions properly on mutable hash tables 1"
        '(#t #t #t #t #t #t #t #t #t #t #t #t #t #t #t #f)
      (map hash-table-mutable? test-tables))

    (pass-if-equal "hash-table-mutable? functions properly on immutable hash tables"
        (map (lambda (x) #f) test-tables)
      (map hash-table-mutable? (map hash-table-copy test-tables)))

    (pass-if "hash-table-mutable? functions properly on mutable hash tables 2"
      (hash-table-mutable? (hash-table-copy ht-fixnum2 #t))))

  (with-test-prefix "accessors"

    (pass-if-equal "hash-table-ref when key is not in table 1"
        (map (lambda (ht) 'err) test-tables)
      (map (lambda (ht)
             (guard (exn
                     (else 'err))
               (hash-table-ref ht 'not-a-key)))
           test-tables))

    (pass-if-equal "hash-table-ref when key is not in table 2"
        (map (lambda (ht) 'err) test-tables)
      (map (lambda (ht)
             (guard (exn
                     (else 'err))
               (hash-table-ref ht 'not-a-key (lambda () 'err))))
           test-tables))

    (pass-if-equal "hash-table-ref when key is not in table 3"
        (map (lambda (ht) 'err) test-tables)
      (map (lambda (ht)
             (guard (exn
                     (else 'err))
               (hash-table-ref ht 'not-a-key (lambda () 'err) values)))
           test-tables))

    (pass-if-equal "hash-table-ref functions properly"
        '(err "fever" err err err err err twain err 4 err 4 err stookey err 2)
      (map (lambda (ht key)
             (guard (exn
                     (else 'err))
               (hash-table-ref ht key)))
           test-tables
           '(foo 101.3
                 x "y"
                 (14 15) #\newline
                 (edward) (mark)
                 "p" "pref"
                 "mike" "PAUL"
                 jane noel
                 0 4)))

    (pass-if-equal "hash-table-ref accepts FAILURE and functions properly"
        '(eh "fever" eh eh eh eh eh twain eh 4 eh 4 eh stookey eh 2)
      (map (lambda (ht key)
             (hash-table-ref ht key (lambda () 'eh)))
           test-tables
           '(foo 101.3
                 x "y"
                 (14 15) #\newline
                 (edward) (mark)
                 "p" "pref"
                 "mike" "PAUL"
                 jane noel
                 0 4)))

    (pass-if-equal "hash-table-ref accepts FAILURE and SUCCESS and functions properly"
        '(eh ("fever") eh eh eh eh eh (twain) eh (4) eh (4) eh (stookey) eh (2))
      (map (lambda (ht key)
             (guard (exn
                     (else 'err))
               (hash-table-ref ht key (lambda () 'eh) list)))
           test-tables
           '(foo 101.3
                 x "y"
                 (14 15) #\newline
                 (edward) (mark)
                 "p" "pref"
                 "mike" "PAUL"
                 jane noel
                 0 4)))

    (pass-if-equal "hash-table-ref/default uses DEFAULT"
        (map (lambda (ht) 'eh) test-tables)
      (map (lambda (ht)
             (guard (exn
                     (else 'eh))
               (hash-table-ref/default ht 'not-a-key 'eh)))
           test-tables))

    (pass-if-equal "hash-table-ref/default functions properly"
        '(eh "fever" eh eh eh eh eh twain eh 4 eh 4 eh stookey eh 2)
      (map (lambda (ht key)
             (hash-table-ref/default ht key 'eh))
           test-tables
           '(foo 101.3
                 x "y"
                 (14 15) #\newline
                 (edward) (mark)
                 "p" "pref"
                 "mike" "PAUL"
                 jane noel
                 0 4))))

  (with-test-prefix "mutators"

    (pass-if-equal "hash-table-set! with no key-value pairs does nothing"
        '()
      (begin (hash-table-set! ht-fixnum)
             (list-sort < (hash-table-keys ht-fixnum))))

    (pass-if-equal "hash-table-set! functions properly 1"
        '(121 144 169)
      (begin (hash-table-set! ht-fixnum 121 11 144 12 169 13)
             (list-sort < (hash-table-keys ht-fixnum))))

    (pass-if-equal "hash-table-set! functions properly 2"
        '(0 1 4 9 16 25 36 49 64 81 121 144 169)
      (begin (hash-table-set! ht-fixnum
                              0 0 1 1 4 2 9 3 16 4 25 5 36 6 49 7 64 8 81 9)
             (list-sort < (hash-table-keys ht-fixnum))))

    (pass-if-equal "hash-table-set! functions properly 3"
        '(13 12 11 0 1 2 3 4 5 6 7 8 9)
      (map (lambda (i) (hash-table-ref/default ht-fixnum i 'error))
           '(169 144 121 0 1 4 9 16 25 36 49 64 81)))

    (pass-if-equal "hash-table-delete! with no keys does nothing"
        '(13 12 11 0 1 2 3 4 5 6 7 8 9)
      (begin (hash-table-delete! ht-fixnum)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i 'error))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-delete! functions properly 1"
        '(-1 12 -1 0 -1 2 -1 4 -1 6 -1 8 -1)
      (begin (hash-table-delete! ht-fixnum 1 9 25 49 81 200 121 169 81 1)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-delete! functions properly 2"
        '(-1 12 -1 -1 -1 2 -1 4 -1 -1 -1 8 -1)
      (begin (hash-table-delete! ht-fixnum 200 100 0 81 36)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-intern! functions properly 1"
        '(13 12 11 0 1 2 -1 4 -1 -1 -1 8 -1)
      (begin (hash-table-intern! ht-fixnum 169 (lambda () 13))
             (hash-table-intern! ht-fixnum 121 (lambda () 11))
             (hash-table-intern! ht-fixnum   0 (lambda ()  0))
             (hash-table-intern! ht-fixnum   1 (lambda ()  1))
             (hash-table-intern! ht-fixnum   1 (lambda () 99))
             (hash-table-intern! ht-fixnum 121 (lambda () 66))
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-map->list functions properly 1"
        '(#(0 0) #(1 1) #(4 2) #(16 4) #(64 8) #(121 11) #(144 12) #(169 13))
      (list-sort (lambda (v1 v2) (< (vector-ref v1 0) (vector-ref v2 0)))
                 (hash-table-map->list vector ht-fixnum)))

    (pass-if-equal "hash-table-prune! functions properly"
        '((0 0) (1 1) (4 2) (16 4) (64 8) #;(121 11) (144 12) #;(169 13))
      (begin (hash-table-prune! (lambda (key val)
                                  (and (odd? key) (> val 10)))
                                ht-fixnum)
             (list-sort (lambda (l1 l2)
                          (< (car l1) (car l2)))
                        (hash-table-map->list list ht-fixnum))))

    (pass-if-equal "hash-table-intern! functions properly 2"
        '((0 0) (1 1) (4 2) (16 4) (64 8) (121 11) (144 12) (169 13))
      (begin (hash-table-intern! ht-fixnum 169 (lambda () 13))
             (hash-table-intern! ht-fixnum 144 (lambda () 9999))
             (hash-table-intern! ht-fixnum 121 (lambda () 11))
             (list-sort (lambda (l1 l2)
                          (< (car l1) (car l2)))
                        (hash-table-map->list list ht-fixnum))))

    (pass-if-equal "hash-table-update! with FAILURE functions properly 1"
        '(13 12 11 0 1 2 3 4 -1 -1 -1 8 -1)
      (begin (hash-table-update! ht-fixnum 9 length (lambda () '(a b c)))
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-update! functions properly"
        '(13 12 11 0 1 2 3 -4 -1 -1 -1 8 -1)
      (begin (hash-table-update! ht-fixnum 16 -)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-update! with FAILURE functions properly 2"
        '(13 12 11 0 1 2 3 4 -1 -1 -1 8 -1)
      (begin (hash-table-update! ht-fixnum 16 - abs)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-update!/default functions properly 1"
        '(13 12 11 0 1 2 3 4 -5 -1 -1 8 -1)
      (begin (hash-table-update!/default ht-fixnum 25 - 5)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-update!/default functions properly 2"
        '(13 12 11 0 1 2 3 4 5 -1 -1 8 -1)
      (begin (hash-table-update!/default ht-fixnum 25 - 999)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if "hash-table-pop! functions properly"
      (let* ((n0 (hash-table-size ht-fixnum))
             (ht (hash-table-copy ht-fixnum #t)))
        (call-with-values
            (lambda () (hash-table-pop! ht))
          (lambda (key val)
            (and (= key (* val val))
                 (= (- n0 1) (hash-table-size ht)))))))

    (pass-if-equal "hash-table-delete! functions properly 2"
        '(13 12 11 0 1 2 3 4 5 -1 -1 8 -1 -1)
      (begin (hash-table-delete! ht-fixnum 75)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 75 81))))

    ;; Spec says HASH-TABLE returns an immutable hash table, so we put a
    ;; HASH-TABLE-COPY here
    (let ((ht-eg (hash-table-copy
                  (hash-table number-comparator 1 1 4 2 9 3 16 4 25 5 64 8)
                  #t)))
      (pass-if-equal "hash-table-delete! functions properly 3"
          0
        (hash-table-delete! ht-eg))
      (pass-if-equal "hash-table-delete! functions properly 4"
          0
        (hash-table-delete! ht-eg 2 7 2000))
      (pass-if-equal "hash-table-delete! functions properly 5"
          3
        (hash-table-delete! ht-eg 1 2 4 7 64 2000))
      (pass-if "hash-table-delete! functions properly 6"
        (= 3 (length (hash-table-keys ht-eg)))))

    (pass-if-equal "hash-table-ref/default functions properly 2"
        '(13 12 11 0 1 2 3 4 5 -1 -1 8 -1)
      (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
           '(169 144 121 0 1 4 9 16 25 36 49 64 81)))

    (pass-if-equal "hash-table-set! functions properly 4"
        '(13 12 11 0 1 2 3 4 5 6 -1 8 9)
      (begin (hash-table-set! ht-fixnum 36 6)
             (hash-table-set! ht-fixnum 81 9)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(169 144 121 0 1 4 9 16 25 36 49 64 81))))

    (pass-if-equal "hash-table-clear! clears hash table"
        0
      (begin (hash-table-clear! ht-eq)
             (hash-table-size ht-eq))))

  (with-test-prefix "the whole hash table"

    (pass-if-equal "hash-table-size returns correct table size"
        3
      (begin (hash-table-set! ht-eq 'foo 13 'bar 14 'baz 18)
             (hash-table-size ht-eq)))

    (pass-if-equal "hash-table-size returns correct table size 2"
        '(0 3 #t)
      (let* ((ht (hash-table-empty-copy ht-eq))
             (n0 (hash-table-size ht))
             (ignored (hash-table-set! ht 'foo 13 'bar 14 'baz 18))
             (n1 (hash-table-size ht)))
        (list n0 n1 (hash-table=? default-comparator ht ht-eq))))

    (pass-if-equal "hash-table-size returns 0 with empty hash table"
        0
      (begin (hash-table-clear! ht-eq)
             (hash-table-size ht-eq)))

    (pass-if-equal "hash-table-find functions properly 1"
        '(144 12)
      (hash-table-find (lambda (key val)
                         (if (= 144 key (* val val))
                             (list key val)
                             #f))
                       ht-fixnum
                       (lambda () 99)))

    (pass-if-equal "hash-table-find functions properly 2"
        99
      (hash-table-find (lambda (key val)
                         (if (= 144 key val)
                             (list key val)
                             #f))
                       ht-fixnum
                       (lambda () 99)))

    (pass-if-equal "hash-table-count functions properly"
        2
      (hash-table-count <= ht-fixnum)))

  (with-test-prefix "mapping and folding"

    (pass-if-equal "hash-table-ref/default functions properly 3"
        '(0 1 2 3 4 5 6 -1 8 9 -1 11 12 13 -1)
      (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
           '(0 1 4 9 16 25 36 49 64 81 100 121 144 169 196)))

    (pass-if-equal "hash-table-map functions properly"
        '(0 1 4 9 16 25 36 -1 64 81 -1 121 144 169 -1)
      (let ((ht (hash-table-map (lambda (val) (* val val))
                                eqv-comparator
                                ht-fixnum)))
        (map (lambda (i) (hash-table-ref/default ht i -1))
             '(0 1 4 9 16 25 36 49 64 81 100 121 144 169 196))))

    (pass-if-equal "hash-table-for-each functions properly"
        '(#(0 1 4 9 16 25 36 -1 64 81 -1 121 144 169 -1)
          #(0 1 2 3  4  5  6 -1  8  9 -1  11  12  13 -1))
      (let ((keys (make-vector 15 -1))
            (vals (make-vector 15 -1)))
        (hash-table-for-each (lambda (key val)
                               (vector-set! keys val key)
                               (vector-set! vals val val))
                             ht-fixnum)
        (list keys vals)))

    (pass-if-equal "hash-table-map! functions properly"
        '(0 1 2 3 -4 -5 -6 -1 -8 -9 -1 -11 -12 -13 -1)
      (begin (hash-table-map! (lambda (key val)
                                (if (<= 10 key)
                                    (- val)
                                    val))
                              ht-fixnum)
             (map (lambda (i) (hash-table-ref/default ht-fixnum i -1))
                  '(0 1 4 9 16 25 36 49 64 81 100 121 144 169 196))))

    (pass-if-equal "hash-table-fold functions properly 1"
        13
      (hash-table-fold (lambda (key val acc)
                         (+ val acc))
                       0
                       ht-string-ci2))

    (pass-if-equal "hash-table-fold functions properly 2"
        '(0 1 4 9 16 25 36 64 81 121 144 169)
      (list-sort < (hash-table-fold (lambda (key val acc)
                                      (cons key acc))
                                    '()
                                    ht-fixnum))))

  (with-test-prefix "copying and conversion"

    (pass-if "hash-table-copy functions properly 1"
      (hash-table=? number-comparator ht-fixnum (hash-table-copy ht-fixnum)))

    (pass-if "hash-table-copy functions properly 2"
      (hash-table=? number-comparator ht-fixnum (hash-table-copy ht-fixnum #f)))

    (pass-if "hash-table-copy functions properly 3"
      (hash-table=? number-comparator ht-fixnum (hash-table-copy ht-fixnum #t)))

    (pass-if "hash-table-copy functions properly 4"
      (not (hash-table-mutable? (hash-table-copy ht-fixnum))))

    (pass-if "hash-table-copy functions properly 5"
      (not (hash-table-mutable? (hash-table-copy ht-fixnum #f))))

    (pass-if "hash-table-copy functions properly 6"
      (hash-table-mutable? (hash-table-copy ht-fixnum #t)))

    (pass-if-equal "hash-table->alist functions properly 1"
        '()
      (hash-table->alist ht-eq))

    (pass-if-equal "hash-table->alist functions properly 2"
        '((0 . 0)
          (1 . 1)
          (4 . 2)
          (9 . 3)
          (16 . -4)
          (25 . -5)
          (36 . -6)
          (64 . -8)
          (81 . -9)
          (121 . -11)
          (144 . -12)
          (169 . -13))
      (list-sort (lambda (x y) (< (car x) (car y)))
                 (hash-table->alist ht-fixnum))))

  (with-test-prefix "hash tables as sets"

    (pass-if-equal "hash-table-union! functions properly 1"
        '((0 . 0)
          (1 . 1)
          (4 . 2)
          (9 . 3)
          (16 . -4)
          (25 . -5)
          (36 . -6)
          (49 . 7)
          (64 . -8)
          (81 . -9)
          (121 . -11)
          (144 . -12)
          (169 . -13))
      (begin (hash-table-union! ht-fixnum ht-fixnum2)
             (list-sort (lambda (x y) (< (car x) (car y)))
                        (hash-table->alist ht-fixnum))))

    (pass-if-equal "hash-table-union! functions properly 2"
        '((0 . 0)
          (1 . 1)
          (4 . 2)
          (9 . 3)
          (16 . 4)
          (25 . 5)
          (36 . 6)
          (49 . 7)
          (64 . 8)
          (81 . 9)
          (121 . -11)
          (144 . -12)
          (169 . -13))
      (let ((ht (hash-table-copy ht-fixnum2 #t)))
        (hash-table-union! ht ht-fixnum)
        (list-sort (lambda (x y) (< (car x) (car y)))
                   (hash-table->alist ht))))

    ;; Spec in Specification section says "It is an error to pass two
    ;; hash tables that have different comparators or equality
    ;; predicates to any of the procedures of this SRFI."
    ;;
    ;; So we create a new hash table with number-comparator with the
    ;; contents of ht-eqv2

    (let ((ht-fixnum3 (hash-table-map identity number-comparator ht-eqv2)))
      (pass-if "hash-table-union! functions properly 3"
        (begin (hash-table-union! ht-fixnum3 ht-fixnum)
               (hash-table=? number-comparator ht-fixnum ht-fixnum3)))

      (pass-if "hash-table-intersection! functions properly 1"
        (begin (hash-table-intersection! ht-fixnum3 ht-fixnum)
               (hash-table=? number-comparator ht-fixnum ht-fixnum3))))

    (pass-if "hash-table-intersection! functions properly 2"
      (begin (hash-table-intersection! ht-eqv2 ht-eqv)
             (hash-table-empty? ht-eqv2)))

    (pass-if-equal "hash-table-intersection! functions properly 3"
        '((0 . 0)
          (1 . 1)
          (4 . 2)
          (9 . 3)
          (16 . -4)
          (25 . -5)
          (36 . -6)
          (49 . 7)
          (64 . -8)
          (81 . -9))
      (begin (hash-table-intersection! ht-fixnum ht-fixnum2)
             (list-sort (lambda (x y) (< (car x) (car y)))
                        (hash-table->alist ht-fixnum))))

    (pass-if-equal "hash-table-intersection! functions properly 4"
        '((4 . 2)
          (25 . -5))
      (begin (hash-table-intersection!
              ht-fixnum
              (alist->hash-table '((-1 . -1) (4 . 202) (25 . 205) (100 . 10))
                                 number-comparator))
             (list-sort (lambda (x y) (< (car x) (car y)))
                        (hash-table->alist ht-fixnum))))

    (pass-if-equal "hash-table-difference! functions properly"
        '((0 . 0)
          (1 . 1)
          (9 . 3)
          (16 . 4)
          (36 . 6)
          (49 . 7)
          (64 . 8)
          (81 . 9))
      (let ((ht (hash-table-copy ht-fixnum2 #t)))
        (hash-table-difference!
         ht
         (alist->hash-table '((-1 . -1) (4 . 202) (25 . 205) (100 . 10))
                            number-comparator))
        (list-sort (lambda (x y) (< (car x) (car y)))
                   (hash-table->alist ht))))

    (pass-if-equal "hash-table-xor! functions properly"
        '((-1 . -1)
          (0 . 0)
          (1 . 1)
          (9 . 3)
          (16 . 4)
          (36 . 6)
          (49 . 7)
          (64 . 8)
          (81 . 9)
          (100 . 10))
      (let ((ht (hash-table-copy ht-fixnum2 #t)))
        (hash-table-xor!
         ht
         (alist->hash-table '((-1 . -1) (4 . 202) (25 . 205) (100 . 10))
                            number-comparator))
        (list-sort (lambda (x y) (< (car x) (car y)))
                   (hash-table->alist ht))))

    (pass-if-exception "hash-table-ref signals 'key not found' error (again)"
        '(misc-error . "^Key not in table")
      (hash-table-ref ht-default "this key won't be present")))

  (with-test-prefix "deprecated"

    (pass-if "hash returns exact integers"
      (let* ((x (list 1 2 3))
             (y (cons 1 (cdr x)))
             (h1 (hash x))
             (h2 (hash y)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "string-hash returns exact integers"
      (let* ((x "abcd")
             (y (string-append "ab" "cd"))
             (h1 (string-hash x))
             (h2 (string-hash y)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "string-ci-hash returns exact integers"
      (let* ((x "Hello There!")
             (y "hello THERE!")
             (h1 (string-ci-hash x))
             (h2 (string-ci-hash y)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "hash-by-identity returns exact integers"
      (let* ((x (vector 'a "bcD" #\c '(d 2.718) -42 (bytevector) '#() (bytevector 9 20)))
             (y x)
             (h1 (hash-by-identity x))
             (h2 (hash-by-identity y)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "hash returns exact integers 2"
      (let* ((x (list 1 2 3))
             (y (cons 1 (cdr x)))
             (h1 (hash x 60))
             (h2 (hash y 60)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "string-hash returns exact integers 2"
      (let* ((x "abcd")
             (y (string-append "ab" "cd"))
             (h1 (string-hash x 97))
             (h2 (string-hash y 97)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "string-ci-hash returns exact integers 2"
      (let* ((x "Hello There!")
             (y "hello THERE!")
             (h1 (string-ci-hash x 101))
             (h2 (string-ci-hash y 101)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "hash-by-identity returns exact integers 2"
      (let* ((x (vector 'a "bcD" #\c '(d 2.718) -42 (bytevector) '#() (bytevector 19 20)))
             (y x)
             (h1 (hash-by-identity x 102))
             (h2 (hash-by-identity y 102)))
        (and (exact-integer? h1)
             (exact-integer? h2)
             (= h1 h2))))

    (pass-if "hash-table-equivalence-function functions properly"
      (let ((f (hash-table-equivalence-function ht-fixnum)))
        (if (procedure? f)
            (f 34 34)
            #t)))

    (pass-if "hash-table-hash-function functions properly"
      (let ((f (hash-table-hash-function ht-fixnum)))
        (if (procedure? f)
            (= (f 34) (f 34))
            #t)))

    (pass-if-equal "hash-table-exists? functions properly"
        '(#t #t #f #f #t #f #f #f #f #t #f)
      (map (lambda (key) (hash-table-exists? ht-fixnum2 key))
           '(0 1 2 3 4 5 6 7 8 9 10)))

    (pass-if-equal "hash-table-walk functions properly"
        (apply +
               (map (lambda (x) (* x x))
                    '(0 1 2 3 4 5 6 7 8 9)))
      (let ((n 0))
        (hash-table-walk ht-fixnum2
                         (lambda (key val) (set! n (+ n key))))
        n))

    (pass-if-equal "hash-table-fold with reversed arguments functions properly"
        '(0 1 4 9 16 25 36 49 64 81)
      (list-sort < (hash-table-fold ht-fixnum2
                                    (lambda (key val acc)
                                      (cons key acc))
                                    '())))

    (pass-if-equal "hash-table-merge! functions properly"
        '((0 . 0)
          (.25 . .5)
          (1 . 1)
          (4 . 2)
          (9 . 3)
          (16 . 4)
          (25 . 5)
          (36 . 6)
          (49 . 7)
          (64 . 8)
          (81 . 9)
          (121 . -11)
          (144 . -12))
      (let ((ht (hash-table-copy ht-fixnum2 #t))
            (ht2 (hash-table number-comparator
                             .25 .5 64 9999 81 9998 121 -11 144 -12)))
        (hash-table-merge! ht ht2)
        (list-sort (lambda (x y) (< (car x) (car y)))
                   (hash-table->alist ht))))))

;; eof
